[tool:pytest]
addopts= --tb native -v -r fxX --maxfail=25 -p no:warnings
# Traceback print mode (auto/long/short/line/native/no)
# addopts= --pdb --tb native -v -r fxX --maxfail=25 -p no:warnings
python_files=test/*test_*.py
# python_files=env/Lib/site-packages/sqlalchemy/testing/suite/*test_*.py
# python_files=../sqlalchemy/test/*test_*.py

# Commented out the three lines below because they caused... configparser.InterpolationSyntaxError: '%' must be followed by '%' or '(', found: '%Y-%m-%d %H:%M:%S'
# log_cli_date_format = %Y-%m-%d %H:%M:%S
# log_file = logs/pytest-logs.txt
# log_file_date_format = %Y-%m-%d %H:%M:%S

# The ``[tool:pytest]`` section include directives to help with these runners.
# When using pytest the test/conftest.py file will bootstrap SQLAlchemy's plugin.

# Custom markers, see: https://docs.pytest.org/en/stable/how-to/mark.html
markers =
    mypy: mypy integration / plugin tests
    backend: tests that should run on all backends; typically dialect-sensitive
#    memory_intensive: memory / CPU intensive suite tests
#    timing_intensive: time-oriented tests that are sensitive to race conditions
#    sparse_backend: tests that should run on multiple backends, not necessarily all



[sqla_testing]
requirement_cls=sqlalchemy_hsqldb.requirements:HyperSqlRequirements
#- profile_file=test/profiles.txt
profile_file=test/profiles_hsqldb.txt
# TODO: verify where 'profiles_hsqldb.txt' is created. Doesn't appear to happen on a failed test.

# The section above contains configuration used by SQLAlchemy's test plugin.
# TODO: ensure the value of requiremnt_cls is correct...
#		The 'requirement_cls' above links to the Requirements class in Requirements.py
